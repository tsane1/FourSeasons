<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!-- NewPage -->
<html lang="en">
<head>
<!-- Generated by javadoc (version 1.7.0_45) on Wed Mar 11 12:59:24 EDT 2015 -->
<title>Container</title>
<meta name="date" content="2015-03-11">
<link rel="stylesheet" type="text/css" href="../../../stylesheet.css" title="Style">
</head>
<body>
<script type="text/javascript"><!--
    if (location.href.indexOf('is-external=true') == -1) {
        parent.document.title="Container";
    }
//-->
</script>
<noscript>
<div>JavaScript is disabled on your browser.</div>
</noscript>
<!-- ========= START OF TOP NAVBAR ======= -->
<div class="topNav"><a name="navbar_top">
<!--   -->
</a><a href="#skip-navbar_top" title="Skip navigation links"></a><a name="navbar_top_firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="../../../overview-summary.html">Overview</a></li>
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="class-use/Container.html">Use</a></li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="../../../deprecated-list.html">Deprecated</a></li>
<li><a href="../../../index-files/index-1.html">Index</a></li>
<li><a href="../../../help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="../../../ks/common/view/ColumnView.html" title="class in ks.common.view"><span class="strong">Prev Class</span></a></li>
<li><a href="../../../ks/common/view/DeckView.html" title="class in ks.common.view"><span class="strong">Next Class</span></a></li>
</ul>
<ul class="navList">
<li><a href="../../../index.html?ks/common/view/Container.html" target="_top">Frames</a></li>
<li><a href="Container.html" target="_top">No Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_top">
<li><a href="../../../allclasses-noframe.html">All Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_top");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li><a href="#nested_classes_inherited_from_class_javax.swing.JComponent">Nested</a>&nbsp;|&nbsp;</li>
<li><a href="#fields_inherited_from_class_javax.swing.JComponent">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor_summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method_summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li><a href="#constructor_detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method_detail">Method</a></li>
</ul>
</div>
<a name="skip-navbar_top">
<!--   -->
</a></div>
<!-- ========= END OF TOP NAVBAR ========= -->
<!-- ======== START OF CLASS DATA ======== -->
<div class="header">
<div class="subTitle">ks.common.view</div>
<h2 title="Class Container" class="title">Class Container</h2>
</div>
<div class="contentContainer">
<ul class="inheritance">
<li>java.lang.Object</li>
<li>
<ul class="inheritance">
<li>java.awt.Component</li>
<li>
<ul class="inheritance">
<li>java.awt.Container</li>
<li>
<ul class="inheritance">
<li>javax.swing.JComponent</li>
<li>
<ul class="inheritance">
<li>javax.swing.JPanel</li>
<li>
<ul class="inheritance">
<li>ks.common.view.Container</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="description">
<ul class="blockList">
<li class="blockList">
<dl>
<dt>All Implemented Interfaces:</dt>
<dd>java.awt.image.ImageObserver, java.awt.MenuContainer, java.io.Serializable, javax.accessibility.Accessible</dd>
</dl>
<hr>
<br>
<pre>public class <span class="strong">Container</span>
extends javax.swing.JPanel</pre>
<div class="block">The container provides the environment within which all Solitaire plug-ins
 execute.
 <p>
 The container is initialized with a Solitaire Plug-in, and manages the interaction
 between the user and the game. All mouse events pass through the container, and
 are delivered to the appropriate widget based upon the (x,y) point of the mouse
 event.
 <p>
 All Undo requests (right mouse clicks) are first identified by the container, and
 are passed along to the solitaire game.
 <p>
 The container manages any Widgets that are being dragged on the screen. Typically,
 these are <code>CardView</code> widgets, but there is no limitation on this, and
 conceivably any widget could be dragged. The container also manages the Widget that
 initiated the drag event, called the <code>dragSource</code>.
 <p>
 Note: Container must be a java.awt.Component because many of the low-level
       image routines expect an ImageObserver, satisfied by java.awt.Canvas.
       In addition, this class implements key methods enabling events to be
       interpreted and delivered to the Solitaire subclass being viewed.
 <p>
 Note: Since V1.6, the container also is capable of remembering the source widget 
       from which a drag originates, if the Controller invokes <code>setDragSource 
       (Widget w)</code> accordingly. This source widget can then be asked to 
       <code>returnWidget(Widget w)</code> a widget extracted from the source as 
       part of the dragging procedure.
 <p>
 Note: Since V2.2, there is additional logic to enable 'shared state'
       model elements to exist. That is, there is some server-side
       state that stores information about shared state that is only
       accessed</div>
<dl><dt><span class="strong">Author:</span></dt>
  <dd>George T. Heineman (heineman@cs.wpi.edu)</dd>
<dt><span class="strong">See Also:</span></dt><dd><a href="../../../serialized-form.html#ks.common.view.Container">Serialized Form</a></dd></dl>
</li>
</ul>
</div>
<div class="summary">
<ul class="blockList">
<li class="blockList">
<!-- ======== NESTED CLASS SUMMARY ======== -->
<ul class="blockList">
<li class="blockList"><a name="nested_class_summary">
<!--   -->
</a>
<h3>Nested Class Summary</h3>
<ul class="blockList">
<li class="blockList"><a name="nested_classes_inherited_from_class_javax.swing.JComponent">
<!--   -->
</a>
<h3>Nested classes/interfaces inherited from class&nbsp;javax.swing.JComponent</h3>
<code>javax.swing.JComponent.AccessibleJComponent</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="nested_classes_inherited_from_class_java.awt.Component">
<!--   -->
</a>
<h3>Nested classes/interfaces inherited from class&nbsp;java.awt.Component</h3>
<code>java.awt.Component.BaselineResizeBehavior</code></li>
</ul>
</li>
</ul>
<!-- =========== FIELD SUMMARY =========== -->
<ul class="blockList">
<li class="blockList"><a name="field_summary">
<!--   -->
</a>
<h3>Field Summary</h3>
<ul class="blockList">
<li class="blockList"><a name="fields_inherited_from_class_javax.swing.JComponent">
<!--   -->
</a>
<h3>Fields inherited from class&nbsp;javax.swing.JComponent</h3>
<code>TOOL_TIP_TEXT_KEY, UNDEFINED_CONDITION, WHEN_ANCESTOR_OF_FOCUSED_COMPONENT, WHEN_FOCUSED, WHEN_IN_FOCUSED_WINDOW</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="fields_inherited_from_class_java.awt.Component">
<!--   -->
</a>
<h3>Fields inherited from class&nbsp;java.awt.Component</h3>
<code>BOTTOM_ALIGNMENT, CENTER_ALIGNMENT, LEFT_ALIGNMENT, RIGHT_ALIGNMENT, TOP_ALIGNMENT</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="fields_inherited_from_class_java.awt.image.ImageObserver">
<!--   -->
</a>
<h3>Fields inherited from interface&nbsp;java.awt.image.ImageObserver</h3>
<code>ABORT, ALLBITS, ERROR, FRAMEBITS, HEIGHT, PROPERTIES, SOMEBITS, WIDTH</code></li>
</ul>
</li>
</ul>
<!-- ======== CONSTRUCTOR SUMMARY ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor_summary">
<!--   -->
</a>
<h3>Constructor Summary</h3>
<table class="overviewSummary" border="0" cellpadding="3" cellspacing="0" summary="Constructor Summary table, listing constructors, and an explanation">
<caption><span>Constructors</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colOne" scope="col">Constructor and Description</th>
</tr>
<tr class="altColor">
<td class="colOne"><code><strong><a href="../../../ks/common/view/Container.html#Container()">Container</a></strong>()</code>
<div class="block">Creates an empty container with no widgets.</div>
</td>
</tr>
</table>
</li>
</ul>
<!-- ========== METHOD SUMMARY =========== -->
<ul class="blockList">
<li class="blockList"><a name="method_summary">
<!--   -->
</a>
<h3>Method Summary</h3>
<table class="overviewSummary" border="0" cellpadding="3" cellspacing="0" summary="Method Summary table, listing methods, and an explanation">
<caption><span>Methods</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colLast" scope="col">Method and Description</th>
</tr>
<tr class="altColor">
<td class="colFirst"><code>boolean</code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/view/Container.html#addWidget(ks.common.view.Widget)">addWidget</a></strong>(<a href="../../../ks/common/view/Widget.html" title="class in ks.common.view">Widget</a>&nbsp;w)</code>
<div class="block">Adds the widget to the Container.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/view/Container.html#dispose()">dispose</a></strong>()</code>
<div class="block">Attempts to free all resources visible "DOWN" from the container.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/view/Container.html#forceNextHand()">forceNextHand</a></strong>()</code>
<div class="block">Move on to play the next hand for this game.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code><a href="../../../ks/common/view/Widget.html" title="class in ks.common.view">Widget</a></code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/view/Container.html#getActiveDraggingObject()">getActiveDraggingObject</a></strong>()</code>
<div class="block">Returns the object being dragged.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code><a href="../../../ks/common/view/RectangleHierarchy.html" title="class in ks.common.view">RectangleHierarchy</a></code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/view/Container.html#getBackgroundImage()">getBackgroundImage</a></strong>()</code>
<div class="block">Return the background RectangleHierarchy representing the non-widget areas in container.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code><a href="../../../ks/common/view/CardImages.html" title="class in ks.common.view">CardImages</a></code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/view/Container.html#getCardImages()">getCardImages</a></strong>()</code>
<div class="block">Return the card images associated with this container.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>java.lang.String</code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/view/Container.html#getCurrentUser()">getCurrentUser</a></strong>()</code>
<div class="block">Return the current user for this container.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>java.awt.Point</code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/view/Container.html#getDraggingAnchor()">getDraggingAnchor</a></strong>()</code>
<div class="block">Return the offset within the dragging Widget for where the mouse was initially clicked.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code><a href="../../../ks/common/view/Widget.html" title="class in ks.common.view">Widget</a></code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/view/Container.html#getDragSource()">getDragSource</a></strong>()</code>
<div class="block">Gets the source widget from which a drag originated.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code><a href="../../../ks/common/games/Solitaire.html" title="class in ks.common.games">Solitaire</a></code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/view/Container.html#getGame()">getGame</a></strong>()</code>
<div class="block">Need to access internal game to be able to find score, etc...</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>java.awt.Point</code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/view/Container.html#getLastDrag()">getLastDrag</a></strong>()</code>
<div class="block">Returns the last Drag point, or null if no drag is in process.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>java.util.Enumeration&lt;<a href="../../../ks/common/model/Element.html" title="class in ks.common.model">Element</a>&gt;</code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/view/Container.html#getModelElements()">getModelElements</a></strong>()</code>
<div class="block">Return the Model elements associated with the container's game as an Enumeration.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>static <a href="../../../ks/common/view/Widget.html" title="class in ks.common.view">Widget</a></code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/view/Container.html#getNothingBeingDragged()">getNothingBeingDragged</a></strong>()</code>
<div class="block">Returns a 'sentinel' object that represents the fact that nothing
 is being dragged.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>java.awt.Graphics</code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/view/Container.html#getOffscreenGraphics()">getOffscreenGraphics</a></strong>()</code>
<div class="block">Expose the underlying off-screen graphics object to enable
 sophisticated background renders.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code><a href="../../../ks/common/view/RectangleHierarchyVisitor.html" title="interface in ks.common.view">RectangleHierarchyVisitor</a></code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/view/Container.html#getVisitor()">getVisitor</a></strong>()</code>
<div class="block">Return visitor being used to draw background skin.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code><a href="../../../ks/common/view/Widget.html" title="class in ks.common.view">Widget</a></code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/view/Container.html#getWidget(java.awt.event.MouseEvent)">getWidget</a></strong>(java.awt.event.MouseEvent&nbsp;me)</code>
<div class="block">Return the widget (or null if none exist) that includes given mouse location.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>java.util.Enumeration&lt;<a href="../../../ks/common/view/Widget.html" title="class in ks.common.view">Widget</a>&gt;</code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/view/Container.html#getWidgets()">getWidgets</a></strong>()</code>
<div class="block">Return the View Widgets in the container as an Enumeration.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>boolean</code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/view/Container.html#hasWon()">hasWon</a></strong>()</code>
<div class="block">Check with plugin to see if the game has been won.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>boolean</code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/view/Container.html#initialize(ks.common.games.Solitaire)">initialize</a></strong>(<a href="../../../ks/common/games/Solitaire.html" title="class in ks.common.games">Solitaire</a>&nbsp;myGame)</code>
<div class="block">Initialize using a Solitaire game that was already constructed elsewhere.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code><a href="../../../ks/common/view/Widget.html" title="class in ks.common.view">Widget</a></code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/view/Container.html#intersectsWidget(java.awt.Rectangle)">intersectsWidget</a></strong>(java.awt.Rectangle&nbsp;r)</code>
<div class="block">Returns the first Widget that intersects the given Rectangle (or null if none exist).</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>boolean</code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/view/Container.html#isActive()">isActive</a></strong>()</code>
<div class="block">Determine whether the Container is active and ready to process events.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/view/Container.html#leaveTable()">leaveTable</a></strong>()</code>
<div class="block">When a player wishes to leave the entire table.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/view/Container.html#paintComponent(java.awt.Graphics)">paintComponent</a></strong>(java.awt.Graphics&nbsp;g)</code>
<div class="block">Force all model elements to be redrawn.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/view/Container.html#processMouseEvent(java.awt.event.MouseEvent)">processMouseEvent</a></strong>(java.awt.event.MouseEvent&nbsp;me)</code>
<div class="block">Container must send this mouse event to the appropriate controller
 for processing.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/view/Container.html#refreshWidgets()">refreshWidgets</a></strong>()</code>
<div class="block">Refresh widgets in container.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/view/Container.html#releaseDraggingObject()">releaseDraggingObject</a></strong>()</code>
<div class="block">Releases the object being dragged by the container.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/view/Container.html#removeAllWidgets()">removeAllWidgets</a></strong>()</code>
<div class="block">Remove all widgets from this container to start fresh.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/view/Container.html#repaintAll()">repaintAll</a></strong>()</code>
<div class="block">Convenient method to force a repaint of all widgets.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/view/Container.html#repaintBackground()">repaintBackground</a></strong>()</code>
<div class="block">Refresh the background screen which is a hierarchy of rectangles to be filled using background image.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/view/Container.html#resetHand()">resetHand</a></strong>()</code>
<div class="block">Reset existing game to redeal cards exactly as it was started.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/view/Container.html#setActive(boolean)">setActive</a></strong>(boolean&nbsp;newActive)</code>
<div class="block">Activate the container (or deactivate it) to be able to process events.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/view/Container.html#setActiveDraggingObject(ks.common.view.Widget, java.awt.event.MouseEvent)">setActiveDraggingObject</a></strong>(<a href="../../../ks/common/view/Widget.html" title="class in ks.common.view">Widget</a>&nbsp;newActiveDraggingObject,
                       java.awt.event.MouseEvent&nbsp;me)</code>
<div class="block">Specifies the Widget being dragged.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/view/Container.html#setCurrentUser(java.lang.String)">setCurrentUser</a></strong>(java.lang.String&nbsp;user)</code>
<div class="block">Tell Container who the current user player is</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/view/Container.html#setDragSource(ks.common.view.Widget)">setDragSource</a></strong>(<a href="../../../ks/common/view/Widget.html" title="class in ks.common.view">Widget</a>&nbsp;newDragSource)</code>
<div class="block">Sets the source widget from which a drag originated.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/view/Container.html#setLastDrag(java.awt.Point)">setLastDrag</a></strong>(java.awt.Point&nbsp;p)</code>
<div class="block">Tell container of last drag point (or null if ending a drag).</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/view/Container.html#setMouseAdapter(java.awt.event.MouseAdapter)">setMouseAdapter</a></strong>(java.awt.event.MouseAdapter&nbsp;ma)</code>
<div class="block">Alters the way in which this Container reacts to MouseEvents.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/view/Container.html#setMouseMotionAdapter(java.awt.event.MouseMotionAdapter)">setMouseMotionAdapter</a></strong>(java.awt.event.MouseMotionAdapter&nbsp;ma)</code>
<div class="block">Alters the way in which this Container reacts to MouseMotion events.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/view/Container.html#setUndoAdapter(ks.common.controller.UndoAdapter)">setUndoAdapter</a></strong>(<a href="../../../ks/common/controller/UndoAdapter.html" title="class in ks.common.controller">UndoAdapter</a>&nbsp;ua)</code>
<div class="block">Alters the way in which this Container reacts to UndoRequested</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/view/Container.html#setUpdateStatus(ks.client.gamefactory.IUpdateStatus)">setUpdateStatus</a></strong>(<a href="../../../ks/client/gamefactory/IUpdateStatus.html" title="interface in ks.client.gamefactory">IUpdateStatus</a>&nbsp;ius)</code>
<div class="block">Determine who must know of events.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/view/Container.html#setVisitor(ks.common.view.RectangleHierarchyVisitor)">setVisitor</a></strong>(<a href="../../../ks/common/view/RectangleHierarchyVisitor.html" title="interface in ks.common.view">RectangleHierarchyVisitor</a>&nbsp;v)</code>
<div class="block">Sets the entity responsible for updating background skin of the container</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/view/Container.html#updateScore(int)">updateScore</a></strong>(int&nbsp;sc)</code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/view/Container.html#wonGame()">wonGame</a></strong>()</code>
<div class="block">The game has been won.</div>
</td>
</tr>
</table>
<ul class="blockList">
<li class="blockList"><a name="methods_inherited_from_class_javax.swing.JPanel">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;javax.swing.JPanel</h3>
<code>getAccessibleContext, getUI, getUIClassID, setUI, updateUI</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="methods_inherited_from_class_javax.swing.JComponent">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;javax.swing.JComponent</h3>
<code>addAncestorListener, addNotify, addVetoableChangeListener, computeVisibleRect, contains, createToolTip, disable, enable, firePropertyChange, firePropertyChange, firePropertyChange, getActionForKeyStroke, getActionMap, getAlignmentX, getAlignmentY, getAncestorListeners, getAutoscrolls, getBaseline, getBaselineResizeBehavior, getBorder, getBounds, getClientProperty, getComponentPopupMenu, getConditionForKeyStroke, getDebugGraphicsOptions, getDefaultLocale, getFontMetrics, getGraphics, getHeight, getInheritsPopupMenu, getInputMap, getInputMap, getInputVerifier, getInsets, getInsets, getListeners, getLocation, getMaximumSize, getMinimumSize, getNextFocusableComponent, getPopupLocation, getPreferredSize, getRegisteredKeyStrokes, getRootPane, getSize, getToolTipLocation, getToolTipText, getToolTipText, getTopLevelAncestor, getTransferHandler, getVerifyInputWhenFocusTarget, getVetoableChangeListeners, getVisibleRect, getWidth, getX, getY, grabFocus, hide, isDoubleBuffered, isLightweightComponent, isManagingFocus, isOpaque, isOptimizedDrawingEnabled, isPaintingForPrint, isPaintingTile, isRequestFocusEnabled, isValidateRoot, paint, paintImmediately, paintImmediately, print, printAll, putClientProperty, registerKeyboardAction, registerKeyboardAction, removeAncestorListener, removeNotify, removeVetoableChangeListener, repaint, repaint, requestDefaultFocus, requestFocus, requestFocus, requestFocusInWindow, resetKeyboardActions, reshape, revalidate, scrollRectToVisible, setActionMap, setAlignmentX, setAlignmentY, setAutoscrolls, setBackground, setBorder, setComponentPopupMenu, setDebugGraphicsOptions, setDefaultLocale, setDoubleBuffered, setEnabled, setFocusTraversalKeys, setFont, setForeground, setInheritsPopupMenu, setInputMap, setInputVerifier, setMaximumSize, setMinimumSize, setNextFocusableComponent, setOpaque, setPreferredSize, setRequestFocusEnabled, setToolTipText, setTransferHandler, setVerifyInputWhenFocusTarget, setVisible, unregisterKeyboardAction, update</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="methods_inherited_from_class_java.awt.Container">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;java.awt.Container</h3>
<code>add, add, add, add, add, addContainerListener, addPropertyChangeListener, addPropertyChangeListener, applyComponentOrientation, areFocusTraversalKeysSet, countComponents, deliverEvent, doLayout, findComponentAt, findComponentAt, getComponent, getComponentAt, getComponentAt, getComponentCount, getComponents, getComponentZOrder, getContainerListeners, getFocusTraversalKeys, getFocusTraversalPolicy, getLayout, getMousePosition, insets, invalidate, isAncestorOf, isFocusCycleRoot, isFocusCycleRoot, isFocusTraversalPolicyProvider, isFocusTraversalPolicySet, layout, list, list, locate, minimumSize, paintComponents, preferredSize, printComponents, remove, remove, removeAll, removeContainerListener, setComponentZOrder, setFocusCycleRoot, setFocusTraversalPolicy, setFocusTraversalPolicyProvider, setLayout, transferFocusDownCycle, validate</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="methods_inherited_from_class_java.awt.Component">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;java.awt.Component</h3>
<code>action, add, addComponentListener, addFocusListener, addHierarchyBoundsListener, addHierarchyListener, addInputMethodListener, addKeyListener, addMouseListener, addMouseMotionListener, addMouseWheelListener, bounds, checkImage, checkImage, contains, createImage, createImage, createVolatileImage, createVolatileImage, dispatchEvent, enable, enableInputMethods, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, getBackground, getBounds, getColorModel, getComponentListeners, getComponentOrientation, getCursor, getDropTarget, getFocusCycleRootAncestor, getFocusListeners, getFocusTraversalKeysEnabled, getFont, getForeground, getGraphicsConfiguration, getHierarchyBoundsListeners, getHierarchyListeners, getIgnoreRepaint, getInputContext, getInputMethodListeners, getInputMethodRequests, getKeyListeners, getLocale, getLocation, getLocationOnScreen, getMouseListeners, getMouseMotionListeners, getMousePosition, getMouseWheelListeners, getName, getParent, getPeer, getPropertyChangeListeners, getPropertyChangeListeners, getSize, getToolkit, getTreeLock, gotFocus, handleEvent, hasFocus, imageUpdate, inside, isBackgroundSet, isCursorSet, isDisplayable, isEnabled, isFocusable, isFocusOwner, isFocusTraversable, isFontSet, isForegroundSet, isLightweight, isMaximumSizeSet, isMinimumSizeSet, isPreferredSizeSet, isShowing, isValid, isVisible, keyDown, keyUp, list, list, list, location, lostFocus, mouseDown, mouseDrag, mouseEnter, mouseExit, mouseMove, mouseUp, move, nextFocus, paintAll, postEvent, prepareImage, prepareImage, remove, removeComponentListener, removeFocusListener, removeHierarchyBoundsListener, removeHierarchyListener, removeInputMethodListener, removeKeyListener, removeMouseListener, removeMouseMotionListener, removeMouseWheelListener, removePropertyChangeListener, removePropertyChangeListener, repaint, repaint, repaint, resize, resize, setBounds, setBounds, setComponentOrientation, setCursor, setDropTarget, setFocusable, setFocusTraversalKeysEnabled, setIgnoreRepaint, setLocale, setLocation, setLocation, setName, setSize, setSize, show, show, size, toString, transferFocus, transferFocusBackward, transferFocusUpCycle</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="methods_inherited_from_class_java.lang.Object">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;java.lang.Object</h3>
<code>equals, getClass, hashCode, notify, notifyAll, wait, wait, wait</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
<div class="details">
<ul class="blockList">
<li class="blockList">
<!-- ========= CONSTRUCTOR DETAIL ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor_detail">
<!--   -->
</a>
<h3>Constructor Detail</h3>
<a name="Container()">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>Container</h4>
<pre>public&nbsp;Container()</pre>
<div class="block">Creates an empty container with no widgets.
 <p></div>
</li>
</ul>
</li>
</ul>
<!-- ============ METHOD DETAIL ========== -->
<ul class="blockList">
<li class="blockList"><a name="method_detail">
<!--   -->
</a>
<h3>Method Detail</h3>
<a name="setCurrentUser(java.lang.String)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>setCurrentUser</h4>
<pre>public&nbsp;void&nbsp;setCurrentUser(java.lang.String&nbsp;user)</pre>
<div class="block">Tell Container who the current user player is</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>user</code> - </dd><dt><span class="strong">Since:</span></dt>
  <dd>V2.2 to enable multiple solitaire</dd></dl>
</li>
</ul>
<a name="getCurrentUser()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getCurrentUser</h4>
<pre>public&nbsp;java.lang.String&nbsp;getCurrentUser()</pre>
<div class="block">Return the current user for this container.</div>
<dl><dt><span class="strong">Since:</span></dt>
  <dd>V2.2 to enable multiple solitaire</dd></dl>
</li>
</ul>
<a name="addWidget(ks.common.view.Widget)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>addWidget</h4>
<pre>public&nbsp;boolean&nbsp;addWidget(<a href="../../../ks/common/view/Widget.html" title="class in ks.common.view">Widget</a>&nbsp;w)</pre>
<div class="block">Adds the widget to the Container.
 <p>
 This method can only be called after the Container has been initialized. The Widget is added
 to the set of widgets, and a MouseManager is assigned, if one is not already in place.
 <p>
 The Boundary of the Widget is then added to the backgroundImage to maintain the background
 real estate that needs its own painting routines.
 <p>
 If the proposed widget intersects with an existing widget, a message is sent to stderr.
 <p></div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>w</code> - ks.common.view.Widget</dd>
<dt><span class="strong">Returns:</span></dt><dd>boolean true if the widget does not overlap with existing widgets</dd></dl>
</li>
</ul>
<a name="forceNextHand()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>forceNextHand</h4>
<pre>public&nbsp;void&nbsp;forceNextHand()</pre>
<div class="block">Move on to play the next hand for this game. 
 <p>
 Note: This is directly invoked by the user and signifies that they have given
 up for the given hand. If the user wins, call wonGame() instead.</div>
</li>
</ul>
<a name="getActiveDraggingObject()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getActiveDraggingObject</h4>
<pre>public&nbsp;<a href="../../../ks/common/view/Widget.html" title="class in ks.common.view">Widget</a>&nbsp;getActiveDraggingObject()</pre>
<div class="block">Returns the object being dragged. If no object is being dragged,
 the special <code>getNothingBeingDragged()<code> object is the value
 of this method.
 <p></div>
<dl><dt><span class="strong">Returns:</span></dt><dd>ks.common.view.Widget</dd></dl>
</li>
</ul>
<a name="getBackgroundImage()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getBackgroundImage</h4>
<pre>public&nbsp;<a href="../../../ks/common/view/RectangleHierarchy.html" title="class in ks.common.view">RectangleHierarchy</a>&nbsp;getBackgroundImage()</pre>
<div class="block">Return the background RectangleHierarchy representing the non-widget areas in container.
 <p></div>
<dl><dt><span class="strong">Returns:</span></dt><dd>ks.common.view.RectangleHierarchy</dd></dl>
</li>
</ul>
<a name="getDraggingAnchor()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getDraggingAnchor</h4>
<pre>public&nbsp;java.awt.Point&nbsp;getDraggingAnchor()</pre>
<div class="block">Return the offset within the dragging Widget for where the mouse was initially clicked.
 <p></div>
<dl><dt><span class="strong">Returns:</span></dt><dd>Point</dd></dl>
</li>
</ul>
<a name="getDragSource()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getDragSource</h4>
<pre>public&nbsp;<a href="../../../ks/common/view/Widget.html" title="class in ks.common.view">Widget</a>&nbsp;getDragSource()</pre>
<div class="block">Gets the source widget from which a drag originated.
 <p>
 Note: dragSource must be manually set by the controller of the widget since there is
 no obvious way for the container to know the object for which the drag originates.
 <p></div>
<dl><dt><span class="strong">Returns:</span></dt><dd>ks.common.view.Widget</dd><dt><span class="strong">Since:</span></dt>
  <dd>v1.6</dd></dl>
</li>
</ul>
<a name="getLastDrag()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getLastDrag</h4>
<pre>public&nbsp;java.awt.Point&nbsp;getLastDrag()</pre>
<div class="block">Returns the last Drag point, or null if no drag is in process.
 <p>
 This class variable is kept up-to-date by the various MouseManagers
 associated with each widget, as well as the MouseManagers with the
 Container itself that represents the background.
 <p>
 If this ever returns null, it means nothing is being dragged.
 <p></div>
<dl><dt><span class="strong">Returns:</span></dt><dd>java.awt.Point</dd></dl>
</li>
</ul>
<a name="getNothingBeingDragged()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getNothingBeingDragged</h4>
<pre>public static&nbsp;<a href="../../../ks/common/view/Widget.html" title="class in ks.common.view">Widget</a>&nbsp;getNothingBeingDragged()</pre>
<div class="block">Returns a 'sentinel' object that represents the fact that nothing
 is being dragged. This avoids the use of using null object references
 <p></div>
<dl><dt><span class="strong">Returns:</span></dt><dd>ks.common.view.Widget</dd></dl>
</li>
</ul>
<a name="getVisitor()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getVisitor</h4>
<pre>public&nbsp;<a href="../../../ks/common/view/RectangleHierarchyVisitor.html" title="interface in ks.common.view">RectangleHierarchyVisitor</a>&nbsp;getVisitor()</pre>
<div class="block">Return visitor being used to draw background skin.
 <p></div>
<dl><dt><span class="strong">Returns:</span></dt><dd>ks.common.view.RectangleHierarchyVisitor</dd></dl>
</li>
</ul>
<a name="getWidget(java.awt.event.MouseEvent)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getWidget</h4>
<pre>public&nbsp;<a href="../../../ks/common/view/Widget.html" title="class in ks.common.view">Widget</a>&nbsp;getWidget(java.awt.event.MouseEvent&nbsp;me)</pre>
<div class="block">Return the widget (or null if none exist) that includes given mouse location.
 <p></div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>me</code> - java.awt.event.MouseEvent</dd>
<dt><span class="strong">Returns:</span></dt><dd>ks.common.view.Widget</dd></dl>
</li>
</ul>
<a name="getWidgets()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getWidgets</h4>
<pre>public&nbsp;java.util.Enumeration&lt;<a href="../../../ks/common/view/Widget.html" title="class in ks.common.view">Widget</a>&gt;&nbsp;getWidgets()</pre>
<div class="block">Return the View Widgets in the container as an Enumeration.
 <p></div>
<dl><dt><span class="strong">Returns:</span></dt><dd>java.util.Enumeration</dd></dl>
</li>
</ul>
<a name="hasWon()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>hasWon</h4>
<pre>public&nbsp;boolean&nbsp;hasWon()</pre>
<div class="block">Check with plugin to see if the game has been won.</div>
<dl><dt><span class="strong">Returns:</span></dt><dd>boolean    whether the solitaire game has been won, according to the
                    game's method <code>hasWon</code>.</dd></dl>
</li>
</ul>
<a name="initialize(ks.common.games.Solitaire)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>initialize</h4>
<pre>public&nbsp;boolean&nbsp;initialize(<a href="../../../ks/common/games/Solitaire.html" title="class in ks.common.games">Solitaire</a>&nbsp;myGame)</pre>
<div class="block">Initialize using a Solitaire game that was already constructed elsewhere.
 <p></div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>myGame</code> - the plugin to be instantiated and activated.</dd><dt><span class="strong">Since:</span></dt>
  <dd>V2.1 this method is responsible for setting the card images in the container
 as determined by the given Solitaire plugin
 <p>
 After this method, the Container is active.
 
 Since V2.2, we include a security Manager to enforce the
 proper behavior of these Solitaire plugins, just to be safe.</dd></dl>
</li>
</ul>
<a name="intersectsWidget(java.awt.Rectangle)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>intersectsWidget</h4>
<pre>public&nbsp;<a href="../../../ks/common/view/Widget.html" title="class in ks.common.view">Widget</a>&nbsp;intersectsWidget(java.awt.Rectangle&nbsp;r)</pre>
<div class="block">Returns the first Widget that intersects the given Rectangle (or null if none exist).
 <p></div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>r</code> - java.awt.Rectangle</dd>
<dt><span class="strong">Returns:</span></dt><dd>ks.common.view.Widget</dd></dl>
</li>
</ul>
<a name="isActive()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>isActive</h4>
<pre>public&nbsp;boolean&nbsp;isActive()</pre>
<div class="block">Determine whether the Container is active and ready to process events.
 <p>
 Note: When a container is active, all mouse events are processed.
 <p></div>
<dl><dt><span class="strong">Returns:</span></dt><dd>boolean</dd></dl>
</li>
</ul>
<a name="leaveTable()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>leaveTable</h4>
<pre>public&nbsp;void&nbsp;leaveTable()</pre>
<div class="block">When a player wishes to leave the entire table. Note that the GUI has
 already confirmed this with the user so we must now carry out the action.</div>
</li>
</ul>
<a name="paintComponent(java.awt.Graphics)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>paintComponent</h4>
<pre>public&nbsp;void&nbsp;paintComponent(java.awt.Graphics&nbsp;g)</pre>
<div class="block">Force all model elements to be redrawn. Since this method is used by low-level
 java.awt.* code, we must adhere to the semantics of paint(). Thus, all elements
 are redrawn (including the background)
 <p>
 Paint is an imperative command that forces the Container to draw itself.
 <p>
 The dragging of objects is managed separately.
 <p></div>
<dl>
<dt><strong>Overrides:</strong></dt>
<dd><code>paintComponent</code>&nbsp;in class&nbsp;<code>javax.swing.JComponent</code></dd>
<dt><span class="strong">Parameters:</span></dt><dd><code>g</code> - java.awt.Graphics</dd></dl>
</li>
</ul>
<a name="getOffscreenGraphics()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getOffscreenGraphics</h4>
<pre>public&nbsp;java.awt.Graphics&nbsp;getOffscreenGraphics()</pre>
<div class="block">Expose the underlying off-screen graphics object to enable
 sophisticated background renders.
 <p>
 Note that to prevent these renderes from mistakenly disposing
 of this graphics context, we make sure to return a newly 
 created one and let the one invoking this method be responsible
 for disposing of it</div>
</li>
</ul>
<a name="processMouseEvent(java.awt.event.MouseEvent)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>processMouseEvent</h4>
<pre>public&nbsp;void&nbsp;processMouseEvent(java.awt.event.MouseEvent&nbsp;me)</pre>
<div class="block">Container must send this mouse event to the appropriate controller
 for processing.
 <p>
 If the container is inactive, no action is taken. The following mouse events can
 be global and do not apply to a specific Widget (not even handled yet):
 <p>
    MouseExited<br>
    MouseEntered<br>
 <p></div>
<dl>
<dt><strong>Overrides:</strong></dt>
<dd><code>processMouseEvent</code>&nbsp;in class&nbsp;<code>javax.swing.JComponent</code></dd>
<dt><span class="strong">Parameters:</span></dt><dd><code>me</code> - java.awt.event.MouseEvent</dd></dl>
</li>
</ul>
<a name="refreshWidgets()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>refreshWidgets</h4>
<pre>public&nbsp;void&nbsp;refreshWidgets()</pre>
<div class="block">Refresh widgets in container. This only refreshes the widgets that have been marked 'dirty'</div>
</li>
</ul>
<a name="releaseDraggingObject()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>releaseDraggingObject</h4>
<pre>public&nbsp;void&nbsp;releaseDraggingObject()</pre>
<div class="block">Releases the object being dragged by the container.
 <p>
 Note: this will also reset the dragSource and lastDrag to null.</div>
</li>
</ul>
<a name="removeAllWidgets()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>removeAllWidgets</h4>
<pre>public&nbsp;void&nbsp;removeAllWidgets()</pre>
<div class="block">Remove all widgets from this container to start fresh.</div>
</li>
</ul>
<a name="repaintBackground()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>repaintBackground</h4>
<pre>public&nbsp;void&nbsp;repaintBackground()</pre>
<div class="block">Refresh the background screen which is a hierarchy of rectangles to be filled using background image.</div>
</li>
</ul>
<a name="resetHand()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>resetHand</h4>
<pre>public&nbsp;void&nbsp;resetHand()</pre>
<div class="block">Reset existing game to redeal cards exactly as it was started.</div>
</li>
</ul>
<a name="setActive(boolean)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>setActive</h4>
<pre>public&nbsp;void&nbsp;setActive(boolean&nbsp;newActive)</pre>
<div class="block">Activate the container (or deactivate it) to be able to process events.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>newActive</code> - boolean</dd></dl>
</li>
</ul>
<a name="setActiveDraggingObject(ks.common.view.Widget, java.awt.event.MouseEvent)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>setActiveDraggingObject</h4>
<pre>public&nbsp;void&nbsp;setActiveDraggingObject(<a href="../../../ks/common/view/Widget.html" title="class in ks.common.view">Widget</a>&nbsp;newActiveDraggingObject,
                           java.awt.event.MouseEvent&nbsp;me)</pre>
<div class="block">Specifies the Widget being dragged. Note: this is called once. Thereafter, for each
 drag event, MouseManagers for the Widgets update the lastDrag Point in the container.
 <p>
 We also take as input the MouseEvent associated with this dragging object; this enables
 us to calculate the anchor.
 <p>
 Take some care if MouseEvent is null.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>newActiveDraggingObject</code> - ks.common.view.Widget</dd><dd><code>me</code> - MouseEvent</dd></dl>
</li>
</ul>
<a name="setDragSource(ks.common.view.Widget)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>setDragSource</h4>
<pre>public&nbsp;void&nbsp;setDragSource(<a href="../../../ks/common/view/Widget.html" title="class in ks.common.view">Widget</a>&nbsp;newDragSource)</pre>
<div class="block">Sets the source widget from which a drag originated.
 <p>
 Note: dragSource must be manually set by the controller of the widget since there is
 no obvious way for the container to know the object for which the drag originates.
 <p>
 Passing in null simply means that the drag is released.
 <p></div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>newDragSource</code> - ks.common.view.Widget</dd><dt><span class="strong">Since:</span></dt>
  <dd>v1.6</dd></dl>
</li>
</ul>
<a name="setLastDrag(java.awt.Point)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>setLastDrag</h4>
<pre>public&nbsp;void&nbsp;setLastDrag(java.awt.Point&nbsp;p)</pre>
<div class="block">Tell container of last drag point (or null if ending a drag).</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>p</code> - java.awt.Point</dd></dl>
</li>
</ul>
<a name="setMouseAdapter(java.awt.event.MouseAdapter)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>setMouseAdapter</h4>
<pre>public&nbsp;void&nbsp;setMouseAdapter(java.awt.event.MouseAdapter&nbsp;ma)</pre>
<div class="block">Alters the way in which this Container reacts to MouseEvents.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>ma</code> - java.awt.event.MouseAdapter</dd></dl>
</li>
</ul>
<a name="setMouseMotionAdapter(java.awt.event.MouseMotionAdapter)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>setMouseMotionAdapter</h4>
<pre>public&nbsp;void&nbsp;setMouseMotionAdapter(java.awt.event.MouseMotionAdapter&nbsp;ma)</pre>
<div class="block">Alters the way in which this Container reacts to MouseMotion events.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>ma</code> - java.awt.event.MouseMotionAdapter</dd></dl>
</li>
</ul>
<a name="setUpdateStatus(ks.client.gamefactory.IUpdateStatus)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>setUpdateStatus</h4>
<pre>public&nbsp;void&nbsp;setUpdateStatus(<a href="../../../ks/client/gamefactory/IUpdateStatus.html" title="interface in ks.client.gamefactory">IUpdateStatus</a>&nbsp;ius)</pre>
<div class="block">Determine who must know of events.</div>
</li>
</ul>
<a name="setUndoAdapter(ks.common.controller.UndoAdapter)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>setUndoAdapter</h4>
<pre>public&nbsp;void&nbsp;setUndoAdapter(<a href="../../../ks/common/controller/UndoAdapter.html" title="class in ks.common.controller">UndoAdapter</a>&nbsp;ua)</pre>
<div class="block">Alters the way in which this Container reacts to UndoRequested</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>ua</code> - UndoAdapter</dd></dl>
</li>
</ul>
<a name="setVisitor(ks.common.view.RectangleHierarchyVisitor)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>setVisitor</h4>
<pre>public&nbsp;void&nbsp;setVisitor(<a href="../../../ks/common/view/RectangleHierarchyVisitor.html" title="interface in ks.common.view">RectangleHierarchyVisitor</a>&nbsp;v)</pre>
<div class="block">Sets the entity responsible for updating background skin of the container</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>v</code> - the RectangleHierarchyVisitor to be used.</dd></dl>
</li>
</ul>
<a name="wonGame()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>wonGame</h4>
<pre>public&nbsp;void&nbsp;wonGame()</pre>
<div class="block">The game has been won. Move on to the next game.</div>
</li>
</ul>
<a name="getModelElements()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getModelElements</h4>
<pre>public&nbsp;java.util.Enumeration&lt;<a href="../../../ks/common/model/Element.html" title="class in ks.common.model">Element</a>&gt;&nbsp;getModelElements()</pre>
<div class="block">Return the Model elements associated with the container's game as an Enumeration.
 <p>
 This method is not used during play. It is being provided to anticipate the need of
 a sophisticated Beta-testing GUI application that can inspect and manipulate the
 state of a solitaire plug-in.</div>
<dl><dt><span class="strong">Returns:</span></dt><dd>java.util.Enumeration</dd></dl>
</li>
</ul>
<a name="getGame()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getGame</h4>
<pre>public&nbsp;<a href="../../../ks/common/games/Solitaire.html" title="class in ks.common.games">Solitaire</a>&nbsp;getGame()</pre>
<div class="block">Need to access internal game to be able to find score, etc...</div>
</li>
</ul>
<a name="getCardImages()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getCardImages</h4>
<pre>public&nbsp;<a href="../../../ks/common/view/CardImages.html" title="class in ks.common.view">CardImages</a>&nbsp;getCardImages()</pre>
<div class="block">Return the card images associated with this container.
 <p></div>
<dl><dt><span class="strong">Returns:</span></dt><dd>CardImages   the cardImages used by the plugin active within this container.</dd></dl>
</li>
</ul>
<a name="updateScore(int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>updateScore</h4>
<pre>public&nbsp;void&nbsp;updateScore(int&nbsp;sc)</pre>
</li>
</ul>
<a name="dispose()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>dispose</h4>
<pre>public&nbsp;void&nbsp;dispose()</pre>
<div class="block">Attempts to free all resources visible "DOWN" from the container.
 <p>
 This should properly release all graphic objects down from the solitaire game
 to all widgets used in the game.</div>
</li>
</ul>
<a name="repaintAll()">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>repaintAll</h4>
<pre>public&nbsp;void&nbsp;repaintAll()</pre>
<div class="block">Convenient method to force a repaint of all widgets.
 <p>
 Useful for times when the entire set of widgets needs to be drawn, or when the 
 skin changes.</div>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</div>
<!-- ========= END OF CLASS DATA ========= -->
<!-- ======= START OF BOTTOM NAVBAR ====== -->
<div class="bottomNav"><a name="navbar_bottom">
<!--   -->
</a><a href="#skip-navbar_bottom" title="Skip navigation links"></a><a name="navbar_bottom_firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="../../../overview-summary.html">Overview</a></li>
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="class-use/Container.html">Use</a></li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="../../../deprecated-list.html">Deprecated</a></li>
<li><a href="../../../index-files/index-1.html">Index</a></li>
<li><a href="../../../help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="../../../ks/common/view/ColumnView.html" title="class in ks.common.view"><span class="strong">Prev Class</span></a></li>
<li><a href="../../../ks/common/view/DeckView.html" title="class in ks.common.view"><span class="strong">Next Class</span></a></li>
</ul>
<ul class="navList">
<li><a href="../../../index.html?ks/common/view/Container.html" target="_top">Frames</a></li>
<li><a href="Container.html" target="_top">No Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_bottom">
<li><a href="../../../allclasses-noframe.html">All Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_bottom");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li><a href="#nested_classes_inherited_from_class_javax.swing.JComponent">Nested</a>&nbsp;|&nbsp;</li>
<li><a href="#fields_inherited_from_class_javax.swing.JComponent">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor_summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method_summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li><a href="#constructor_detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method_detail">Method</a></li>
</ul>
</div>
<a name="skip-navbar_bottom">
<!--   -->
</a></div>
<!-- ======== END OF BOTTOM NAVBAR ======= -->
</body>
</html>
