<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!-- NewPage -->
<html lang="en">
<head>
<!-- Generated by javadoc (version 1.7.0_45) on Wed Mar 11 12:59:26 EDT 2015 -->
<title>Stack</title>
<meta name="date" content="2015-03-11">
<link rel="stylesheet" type="text/css" href="../../../stylesheet.css" title="Style">
</head>
<body>
<script type="text/javascript"><!--
    if (location.href.indexOf('is-external=true') == -1) {
        parent.document.title="Stack";
    }
//-->
</script>
<noscript>
<div>JavaScript is disabled on your browser.</div>
</noscript>
<!-- ========= START OF TOP NAVBAR ======= -->
<div class="topNav"><a name="navbar_top">
<!--   -->
</a><a href="#skip-navbar_top" title="Skip navigation links"></a><a name="navbar_top_firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="../../../overview-summary.html">Overview</a></li>
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="class-use/Stack.html">Use</a></li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="../../../deprecated-list.html">Deprecated</a></li>
<li><a href="../../../index-files/index-1.html">Index</a></li>
<li><a href="../../../help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="../../../ks/common/model/Pile.html" title="class in ks.common.model"><span class="strong">Prev Class</span></a></li>
<li>Next Class</li>
</ul>
<ul class="navList">
<li><a href="../../../index.html?ks/common/model/Stack.html" target="_top">Frames</a></li>
<li><a href="Stack.html" target="_top">No Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_top">
<li><a href="../../../allclasses-noframe.html">All Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_top");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li>Nested&nbsp;|&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li><a href="#constructor_summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method_summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li><a href="#constructor_detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method_detail">Method</a></li>
</ul>
</div>
<a name="skip-navbar_top">
<!--   -->
</a></div>
<!-- ========= END OF TOP NAVBAR ========= -->
<!-- ======== START OF CLASS DATA ======== -->
<div class="header">
<div class="subTitle">ks.common.model</div>
<h2 title="Class Stack" class="title">Class Stack</h2>
</div>
<div class="contentContainer">
<ul class="inheritance">
<li>java.lang.Object</li>
<li>
<ul class="inheritance">
<li><a href="../../../ks/common/model/Element.html" title="class in ks.common.model">ks.common.model.Element</a></li>
<li>
<ul class="inheritance">
<li>ks.common.model.Stack</li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="description">
<ul class="blockList">
<li class="blockList">
<dl>
<dt>Direct Known Subclasses:</dt>
<dd><a href="../../../ks/common/model/BuildablePile.html" title="class in ks.common.model">BuildablePile</a>, <a href="../../../ks/common/model/Column.html" title="class in ks.common.model">Column</a>, <a href="../../../ks/common/model/Deck.html" title="class in ks.common.model">Deck</a>, <a href="../../../ks/common/model/Pile.html" title="class in ks.common.model">Pile</a></dd>
</dl>
<hr>
<br>
<pre>public class <span class="strong">Stack</span>
extends <a href="../../../ks/common/model/Element.html" title="class in ks.common.model">Element</a></pre>
<div class="block">Models a stack of cards.
 <p>
 A stack of cards is a linear sequence of cards with a bottom (position 0) and a top
 card (position n-1 where n is the number of cards in the stack). Each card 
 maintains its own state (i.e., its value, whether it is face up, whether it is 
 selected).
 <p>
 Cards can be added to the top of the stack with the <code>add (Card c)</code> 
 or the <code>push (Stack s)</code> method. If a <code>Stack</code> of cards is 
 pushed onto the top of the stack, the bottom-most card of the stack s is added 
 to the top of the target stack. Any state changing operation in the stack (add,
 get, push, getSelected, select) resets the selected status of all cards in the 
 stack.
 <p>
 The <code>Card get()</code> method removes and returns the top card in the stack.
 <p>
 The <code>boolean select()</code> method selects just the top card in the stack.
 The <code>boolean select(int n)</code> method selects the top n cards, if 
 available. The selected state of the desired cards is altered.
 <p>
 The <code>Stack getSelected()</code> method removes and returns a stack of cards,
 s, from the top of the stack such that all cards in s are selected, if any are 
 selected.
 <p>
 Stack has some basic helper methods that may prove useful, such as 
 <code>alternatingColors, ascending, descending, sameColor, sameRank, 
 sameSuit</code>. The methods <code>rank()</code> and <code>suit()</code> return 
 the rank and suit (respectively) of the topmost card in the Stack, if one exists;
 if not, then Integer.MAX_VALUE is returned by default.
 <p>
 Creation date: (9/30/01 9:45:50 PM)</div>
<dl><dt><span class="strong">Author:</span></dt>
  <dd>George T. Heineman (heineman@cs.wpi.edu)</dd></dl>
</li>
</ul>
</div>
<div class="summary">
<ul class="blockList">
<li class="blockList">
<!-- ======== CONSTRUCTOR SUMMARY ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor_summary">
<!--   -->
</a>
<h3>Constructor Summary</h3>
<table class="overviewSummary" border="0" cellpadding="3" cellspacing="0" summary="Constructor Summary table, listing constructors, and an explanation">
<caption><span>Constructors</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colOne" scope="col">Constructor and Description</th>
</tr>
<tr class="altColor">
<td class="colOne"><code><strong><a href="../../../ks/common/model/Stack.html#Stack()">Stack</a></strong>()</code>
<div class="block">Construct an empty stack with auto-generated name.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colOne"><code><strong><a href="../../../ks/common/model/Stack.html#Stack(java.lang.String)">Stack</a></strong>(java.lang.String&nbsp;name)</code>
<div class="block">Create an empty Stack with the given name.</div>
</td>
</tr>
</table>
</li>
</ul>
<!-- ========== METHOD SUMMARY =========== -->
<ul class="blockList">
<li class="blockList"><a name="method_summary">
<!--   -->
</a>
<h3>Method Summary</h3>
<table class="overviewSummary" border="0" cellpadding="3" cellspacing="0" summary="Method Summary table, listing methods, and an explanation">
<caption><span>Methods</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colLast" scope="col">Method and Description</th>
</tr>
<tr class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/model/Stack.html#add(ks.common.model.Card)">add</a></strong>(<a href="../../../ks/common/model/Card.html" title="class in ks.common.model">Card</a>&nbsp;c)</code>
<div class="block">Add a card into the stack.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>boolean</code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/model/Stack.html#alternatingColors()">alternatingColors</a></strong>()</code>
<div class="block">Determines whether Cards in the Stack are all alternating in color.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>boolean</code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/model/Stack.html#alternatingColors(int, int)">alternatingColors</a></strong>(int&nbsp;start,
                 int&nbsp;end)</code>
<div class="block">Determines whether Cards in the Stack are all alternating in color.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>boolean</code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/model/Stack.html#ascending()">ascending</a></strong>()</code>
<div class="block">Determines whether Cards in the Stack are all ascending in rank order.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>boolean</code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/model/Stack.html#ascending(int, int)">ascending</a></strong>(int&nbsp;start,
         int&nbsp;end)</code>
<div class="block">Determines whether Cards in the Stack are all ascending in rank order.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>int</code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/model/Stack.html#count()">count</a></strong>()</code>
<div class="block">Returns the number of Cards in the Stack.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>boolean</code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/model/Stack.html#descending()">descending</a></strong>()</code>
<div class="block">Determines whether Cards in the Stack are all descending in rank order.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>boolean</code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/model/Stack.html#descending(int, int)">descending</a></strong>(int&nbsp;start,
          int&nbsp;end)</code>
<div class="block">Determines whether Cards in the Stack are all descending in rank order.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>boolean</code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/model/Stack.html#deselect()">deselect</a></strong>()</code>
<div class="block">Reset all card selections.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>boolean</code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/model/Stack.html#empty()">empty</a></strong>()</code>
<div class="block">Determines whether the Stack is empty.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code><a href="../../../ks/common/model/Card.html" title="class in ks.common.model">Card</a></code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/model/Stack.html#get()">get</a></strong>()</code>
<div class="block">Remove top card from the pile and return it to the callee (or return null if empty).</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>int</code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/model/Stack.html#getNumSelectedCards()">getNumSelectedCards</a></strong>()</code>
<div class="block">Returns the number of Cards that are selected from the stack.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code><a href="../../../ks/common/model/Stack.html" title="class in ks.common.model">Stack</a></code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/model/Stack.html#getSelected()">getSelected</a></strong>()</code>
<div class="block">Return Stack of the selected cards.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code><a href="../../../ks/common/model/Card.html" title="class in ks.common.model">Card</a></code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/model/Stack.html#peek()">peek</a></strong>()</code>
<div class="block">Peek and return a copy of the top-most card (or null if empty).</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code><a href="../../../ks/common/model/Card.html" title="class in ks.common.model">Card</a></code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/model/Stack.html#peek(int)">peek</a></strong>(int&nbsp;idx)</code>
<div class="block">Peek and return a copy of the card identified by idx in the stack.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/model/Stack.html#push(ks.common.model.Stack)">push</a></strong>(<a href="../../../ks/common/model/Stack.html" title="class in ks.common.model">Stack</a>&nbsp;s)</code>
<div class="block">Push Stack onto existing stack; the stack parameter object is unchanged.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>int</code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/model/Stack.html#rank()">rank</a></strong>()</code>
<div class="block">Returns the rank of the top card.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/model/Stack.html#removeAll()">removeAll</a></strong>()</code>
<div class="block">Remove All cards from the stack.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>boolean</code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/model/Stack.html#sameColor()">sameColor</a></strong>()</code>
<div class="block">Determines whether Cards in the Stack are all of the same color.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>boolean</code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/model/Stack.html#sameColor(int, int)">sameColor</a></strong>(int&nbsp;start,
         int&nbsp;end)</code>
<div class="block">Determines whether Cards in the Stack are all of the same color.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>boolean</code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/model/Stack.html#sameRank()">sameRank</a></strong>()</code>
<div class="block">Determines whether Cards in the Stack are all of the same rank.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>boolean</code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/model/Stack.html#sameRank(int, int)">sameRank</a></strong>(int&nbsp;start,
        int&nbsp;end)</code>
<div class="block">Determines whether Cards in the Stack are all of the same rank.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>boolean</code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/model/Stack.html#sameSuit()">sameSuit</a></strong>()</code>
<div class="block">Determines whether Cards in the Stack are all of the same suit.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>boolean</code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/model/Stack.html#sameSuit(int, int)">sameSuit</a></strong>(int&nbsp;start,
        int&nbsp;end)</code>
<div class="block">Determines whether Cards in the Stack are all of the same suit.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>boolean</code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/model/Stack.html#select()">select</a></strong>()</code>
<div class="block">Select the top-most card in the Stack.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>boolean</code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/model/Stack.html#select(int)">select</a></strong>(int&nbsp;newNumSelectedCards)</code>
<div class="block">Select the top n cards in the Stack, where n is a number from 1 - count().</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>int</code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/model/Stack.html#suit()">suit</a></strong>()</code>
<div class="block">Return the suit of the topmost card in the Stack.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>java.lang.String</code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/model/Stack.html#toString()">toString</a></strong>()</code>
<div class="block">Return String representation of Stack</div>
</td>
</tr>
</table>
<ul class="blockList">
<li class="blockList"><a name="methods_inherited_from_class_ks.common.model.Element">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;ks.common.model.<a href="../../../ks/common/model/Element.html" title="class in ks.common.model">Element</a></h3>
<code><a href="../../../ks/common/model/Element.html#getListener()">getListener</a>, <a href="../../../ks/common/model/Element.html#getName()">getName</a>, <a href="../../../ks/common/model/Element.html#setListener(ks.common.model.ElementListener)">setListener</a>, <a href="../../../ks/common/model/Element.html#setName(java.lang.String)">setName</a></code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="methods_inherited_from_class_java.lang.Object">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;java.lang.Object</h3>
<code>equals, getClass, hashCode, notify, notifyAll, wait, wait, wait</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
<div class="details">
<ul class="blockList">
<li class="blockList">
<!-- ========= CONSTRUCTOR DETAIL ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor_detail">
<!--   -->
</a>
<h3>Constructor Detail</h3>
<a name="Stack()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>Stack</h4>
<pre>public&nbsp;Stack()</pre>
<div class="block">Construct an empty stack with auto-generated name.</div>
</li>
</ul>
<a name="Stack(java.lang.String)">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>Stack</h4>
<pre>public&nbsp;Stack(java.lang.String&nbsp;name)</pre>
<div class="block">Create an empty Stack with the given name.
 <p></div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>name</code> - the name of this Stack model element.</dd></dl>
</li>
</ul>
</li>
</ul>
<!-- ============ METHOD DETAIL ========== -->
<ul class="blockList">
<li class="blockList"><a name="method_detail">
<!--   -->
</a>
<h3>Method Detail</h3>
<a name="add(ks.common.model.Card)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>add</h4>
<pre>public&nbsp;void&nbsp;add(<a href="../../../ks/common/model/Card.html" title="class in ks.common.model">Card</a>&nbsp;c)</pre>
<div class="block">Add a card into the stack.
 <p>
 Generates modelChanged action if c is non-null
 <p></div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>c</code> - ks.common.model.Card</dd></dl>
</li>
</ul>
<a name="alternatingColors()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>alternatingColors</h4>
<pre>public&nbsp;boolean&nbsp;alternatingColors()</pre>
<div class="block">Determines whether Cards in the Stack are all alternating in color.
 <p>
 Returns true if the stack is empty.
 <p></div>
<dl><dt><span class="strong">Returns:</span></dt><dd>boolean</dd></dl>
</li>
</ul>
<a name="alternatingColors(int, int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>alternatingColors</h4>
<pre>public&nbsp;boolean&nbsp;alternatingColors(int&nbsp;start,
                        int&nbsp;end)</pre>
<div class="block">Determines whether Cards in the Stack are all alternating in color.
 <p>
 Throws exception if Stack is empty.
 <p></div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>start</code> - the start of the range (zero as first card in Stack)</dd><dd><code>end</code> - the end of the range (not included in the check, and no greater than count())</dd>
<dt><span class="strong">Returns:</span></dt><dd>boolean</dd><dt><span class="strong">Since:</span></dt>
  <dd>V2.0  as helper method that can be exposed</dd></dl>
</li>
</ul>
<a name="ascending()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>ascending</h4>
<pre>public&nbsp;boolean&nbsp;ascending()</pre>
<div class="block">Determines whether Cards in the Stack are all ascending in rank order.
 <p>
 Returns true if the stack is empty.
 <p></div>
<dl><dt><span class="strong">Returns:</span></dt><dd>boolean</dd></dl>
</li>
</ul>
<a name="ascending(int, int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>ascending</h4>
<pre>public&nbsp;boolean&nbsp;ascending(int&nbsp;start,
                int&nbsp;end)</pre>
<div class="block">Determines whether Cards in the Stack are all ascending in rank order.
 <p>
 Throws exception if Stack is empty.
 <p></div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>start</code> - the start of the range (zero as first card in Stack)</dd><dd><code>end</code> - the end of the range (not included in the check, and no greater than count())</dd>
<dt><span class="strong">Returns:</span></dt><dd>boolean</dd><dt><span class="strong">Since:</span></dt>
  <dd>V2.0  as helper method that can be exposed</dd></dl>
</li>
</ul>
<a name="count()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>count</h4>
<pre>public&nbsp;int&nbsp;count()</pre>
<div class="block">Returns the number of Cards in the Stack.
 <p></div>
<dl><dt><span class="strong">Returns:</span></dt><dd>int</dd></dl>
</li>
</ul>
<a name="descending()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>descending</h4>
<pre>public&nbsp;boolean&nbsp;descending()</pre>
<div class="block">Determines whether Cards in the Stack are all descending in rank order.
 <p>
 Returns true if the stack is empty.
 <p></div>
<dl><dt><span class="strong">Returns:</span></dt><dd>boolean</dd></dl>
</li>
</ul>
<a name="descending(int, int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>descending</h4>
<pre>public&nbsp;boolean&nbsp;descending(int&nbsp;start,
                 int&nbsp;end)</pre>
<div class="block">Determines whether Cards in the Stack are all descending in rank order.
 <p>
 Throws Exception if the stack is empty.
 <p></div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>start</code> - the start of the range (zero as first card in Stack)</dd><dd><code>end</code> - the end of the range (not included in the check, and no greater than count())</dd>
<dt><span class="strong">Returns:</span></dt><dd>boolean</dd><dt><span class="strong">Since:</span></dt>
  <dd>V2.0  as helper method that can be exposed</dd></dl>
</li>
</ul>
<a name="deselect()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>deselect</h4>
<pre>public&nbsp;boolean&nbsp;deselect()</pre>
<div class="block">Reset all card selections.
 <p>
 Equivalent to select (0).
 <p>
 Generates modelChanged action.
 <p></div>
<dl><dt><span class="strong">Returns:</span></dt><dd>boolean</dd><dt><span class="strong">Since:</span></dt>
  <dd>v1.6.12</dd></dl>
</li>
</ul>
<a name="empty()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>empty</h4>
<pre>public&nbsp;boolean&nbsp;empty()</pre>
<div class="block">Determines whether the Stack is empty.
 <p></div>
<dl><dt><span class="strong">Returns:</span></dt><dd>boolean</dd></dl>
</li>
</ul>
<a name="get()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>get</h4>
<pre>public&nbsp;<a href="../../../ks/common/model/Card.html" title="class in ks.common.model">Card</a>&nbsp;get()</pre>
<div class="block">Remove top card from the pile and return it to the callee (or return null if empty).
 <p>
 Generates modelChanged action only if stack is non-empty.
 <p></div>
<dl><dt><span class="strong">Returns:</span></dt><dd>ks.common.model.Card</dd></dl>
</li>
</ul>
<a name="getNumSelectedCards()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getNumSelectedCards</h4>
<pre>public&nbsp;int&nbsp;getNumSelectedCards()</pre>
<div class="block">Returns the number of Cards that are selected from the stack.
 <p></div>
<dl><dt><span class="strong">Returns:</span></dt><dd>int</dd></dl>
</li>
</ul>
<a name="getSelected()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getSelected</h4>
<pre>public&nbsp;<a href="../../../ks/common/model/Stack.html" title="class in ks.common.model">Stack</a>&nbsp;getSelected()</pre>
<div class="block">Return Stack of the selected cards.
 <p>
 The cards in the Stack returned by this function are all de-selected.
 <p>
 Generates modelChanged action only if there were some selected cards.
 <p></div>
<dl><dt><span class="strong">Returns:</span></dt><dd>ks.common.model.Stack</dd></dl>
</li>
</ul>
<a name="peek()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>peek</h4>
<pre>public&nbsp;<a href="../../../ks/common/model/Card.html" title="class in ks.common.model">Card</a>&nbsp;peek()</pre>
<div class="block">Peek and return a copy of the top-most card (or null if empty).
 <p>
 Now the card being peek'd is returned with appropriate faceUp and selected status.</div>
<dl><dt><span class="strong">Returns:</span></dt><dd>ks.common.model.Card</dd></dl>
</li>
</ul>
<a name="peek(int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>peek</h4>
<pre>public&nbsp;<a href="../../../ks/common/model/Card.html" title="class in ks.common.model">Card</a>&nbsp;peek(int&nbsp;idx)</pre>
<div class="block">Peek and return a copy of the card identified by idx in the stack.
 
 Note that:
 <br>
   <code>peek() == peek (count() - 1)</code>
 <br></div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>idx</code> - int (a number between 0 and numCards-1)</dd>
<dt><span class="strong">Returns:</span></dt><dd>ks.common.model.Card</dd></dl>
</li>
</ul>
<a name="push(ks.common.model.Stack)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>push</h4>
<pre>public&nbsp;void&nbsp;push(<a href="../../../ks/common/model/Stack.html" title="class in ks.common.model">Stack</a>&nbsp;s)</pre>
<div class="block">Push Stack onto existing stack; the stack parameter object is unchanged.
 <p>
 Generates modelChanged action only if Stack s is non-empty.
 <p></div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>s</code> - ks.common.model.Stack</dd></dl>
</li>
</ul>
<a name="rank()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>rank</h4>
<pre>public&nbsp;int&nbsp;rank()</pre>
<div class="block">Returns the rank of the top card. If no card, then returns MAX_VALUE
 <p></div>
<dl><dt><span class="strong">Returns:</span></dt><dd>int</dd><dt><span class="strong">Since:</span></dt>
  <dd>V1.5.1 returns MAX_VALUE on error, V2.0 throws IllegalArgumentException on empty stack.</dd></dl>
</li>
</ul>
<a name="removeAll()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>removeAll</h4>
<pre>public&nbsp;void&nbsp;removeAll()</pre>
<div class="block">Remove All cards from the stack.
 <p>
 Generates modelChanged action only if stack had cards.</div>
</li>
</ul>
<a name="sameColor()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>sameColor</h4>
<pre>public&nbsp;boolean&nbsp;sameColor()</pre>
<div class="block">Determines whether Cards in the Stack are all of the same color. 
 <p>
 Note that an empty stack returns <code>true</code> as the degenerate case.</div>
<dl><dt><span class="strong">Returns:</span></dt><dd>boolean</dd></dl>
</li>
</ul>
<a name="sameColor(int, int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>sameColor</h4>
<pre>public&nbsp;boolean&nbsp;sameColor(int&nbsp;start,
                int&nbsp;end)</pre>
<div class="block">Determines whether Cards in the Stack are all of the same color. 
 <p>
 Throws an exception on an empty stack.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>start</code> - the start of the range (zero as first card in Stack)</dd><dd><code>end</code> - the end of the range (not included in the check, and no greater than count())</dd>
<dt><span class="strong">Returns:</span></dt><dd>boolean</dd><dt><span class="strong">Since:</span></dt>
  <dd>V2.0  as helper method that can be exposed</dd></dl>
</li>
</ul>
<a name="sameRank()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>sameRank</h4>
<pre>public&nbsp;boolean&nbsp;sameRank()</pre>
<div class="block">Determines whether Cards in the Stack are all of the same rank. Note that
 an empty stack returns <code>true</code> as the degenerate case.
 <p></div>
<dl><dt><span class="strong">Returns:</span></dt><dd>boolean</dd></dl>
</li>
</ul>
<a name="sameRank(int, int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>sameRank</h4>
<pre>public&nbsp;boolean&nbsp;sameRank(int&nbsp;start,
               int&nbsp;end)</pre>
<div class="block">Determines whether Cards in the Stack are all of the same rank. 
 <p>
 Throws an exception on an empty stack.
 <p></div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>start</code> - the start of the range (zero as first card in Stack)</dd><dd><code>end</code> - the end of the range (not included in the check, and no greater than count())</dd>
<dt><span class="strong">Returns:</span></dt><dd>boolean</dd><dt><span class="strong">Since:</span></dt>
  <dd>V2.0  as helper method that can be exposed</dd></dl>
</li>
</ul>
<a name="sameSuit()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>sameSuit</h4>
<pre>public&nbsp;boolean&nbsp;sameSuit()</pre>
<div class="block">Determines whether Cards in the Stack are all of the same suit. Note that
 an empty stack returns <code>true</code> as the degenerate case.
 Creation date: (9/30/01 10:16:30 PM)</div>
<dl><dt><span class="strong">Returns:</span></dt><dd>boolean</dd></dl>
</li>
</ul>
<a name="sameSuit(int, int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>sameSuit</h4>
<pre>public&nbsp;boolean&nbsp;sameSuit(int&nbsp;start,
               int&nbsp;end)</pre>
<div class="block">Determines whether Cards in the Stack are all of the same suit. 
 <p>
 Throws an exception on an empty stack.
 <p></div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>start</code> - the start of the range (zero as first card in Stack)</dd><dd><code>end</code> - the end of the range (not included in the check, and no greater than count())</dd>
<dt><span class="strong">Returns:</span></dt><dd>boolean</dd><dt><span class="strong">Since:</span></dt>
  <dd>V2.0  as helper method that can be exposed</dd></dl>
</li>
</ul>
<a name="select()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>select</h4>
<pre>public&nbsp;boolean&nbsp;select()</pre>
<div class="block">Select the top-most card in the Stack.
 <p>
 Generates modelChanged action if Stack is non-empty.
 <p></div>
<dl><dt><span class="strong">Returns:</span></dt><dd>boolean</dd></dl>
</li>
</ul>
<a name="select(int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>select</h4>
<pre>public&nbsp;boolean&nbsp;select(int&nbsp;newNumSelectedCards)</pre>
<div class="block">Select the top n cards in the Stack, where n is a number from 1 - count().
 <p>
 Generates modelChanged action (because some games might wish to show
     selected cards in a different light than non-selected cards).
 <p></div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>newNumSelectedCards</code> - int</dd>
<dt><span class="strong">Returns:</span></dt><dd>boolean false if not enough cards in the stack to be selected.</dd><dt><span class="strong">Since:</span></dt>
  <dd>V1.5.1 (was previously called setNumSelectedCards(int))</dd></dl>
</li>
</ul>
<a name="suit()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>suit</h4>
<pre>public&nbsp;int&nbsp;suit()</pre>
<div class="block">Return the suit of the topmost card in the Stack. If no card, then returns MAX_VALUE
 <p></div>
<dl><dt><span class="strong">Returns:</span></dt><dd>int</dd><dt><span class="strong">Since:</span></dt>
  <dd>V1.5.1 returns MAX_VALUE on error, V2.0 throws IllegalArgumentException if no cards in stack.</dd></dl>
</li>
</ul>
<a name="toString()">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>toString</h4>
<pre>public&nbsp;java.lang.String&nbsp;toString()</pre>
<div class="block">Return String representation of Stack</div>
<dl>
<dt><strong>Overrides:</strong></dt>
<dd><code><a href="../../../ks/common/model/Element.html#toString()">toString</a></code>&nbsp;in class&nbsp;<code><a href="../../../ks/common/model/Element.html" title="class in ks.common.model">Element</a></code></dd>
<dt><span class="strong">Returns:</span></dt><dd>String</dd><dt><span class="strong">Since:</span></dt>
  <dd>V1.5.1</dd></dl>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</div>
<!-- ========= END OF CLASS DATA ========= -->
<!-- ======= START OF BOTTOM NAVBAR ====== -->
<div class="bottomNav"><a name="navbar_bottom">
<!--   -->
</a><a href="#skip-navbar_bottom" title="Skip navigation links"></a><a name="navbar_bottom_firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="../../../overview-summary.html">Overview</a></li>
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="class-use/Stack.html">Use</a></li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="../../../deprecated-list.html">Deprecated</a></li>
<li><a href="../../../index-files/index-1.html">Index</a></li>
<li><a href="../../../help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="../../../ks/common/model/Pile.html" title="class in ks.common.model"><span class="strong">Prev Class</span></a></li>
<li>Next Class</li>
</ul>
<ul class="navList">
<li><a href="../../../index.html?ks/common/model/Stack.html" target="_top">Frames</a></li>
<li><a href="Stack.html" target="_top">No Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_bottom">
<li><a href="../../../allclasses-noframe.html">All Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_bottom");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li>Nested&nbsp;|&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li><a href="#constructor_summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method_summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li><a href="#constructor_detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method_detail">Method</a></li>
</ul>
</div>
<a name="skip-navbar_bottom">
<!--   -->
</a></div>
<!-- ======== END OF BOTTOM NAVBAR ======= -->
</body>
</html>
