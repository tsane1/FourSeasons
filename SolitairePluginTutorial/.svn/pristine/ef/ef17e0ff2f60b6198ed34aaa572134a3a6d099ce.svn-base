<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!-- NewPage -->
<html lang="en">
<head>
<!-- Generated by javadoc (version 1.7.0_45) on Wed Mar 11 12:59:25 EDT 2015 -->
<title>Widget</title>
<meta name="date" content="2015-03-11">
<link rel="stylesheet" type="text/css" href="../../../stylesheet.css" title="Style">
</head>
<body>
<script type="text/javascript"><!--
    if (location.href.indexOf('is-external=true') == -1) {
        parent.document.title="Widget";
    }
//-->
</script>
<noscript>
<div>JavaScript is disabled on your browser.</div>
</noscript>
<!-- ========= START OF TOP NAVBAR ======= -->
<div class="topNav"><a name="navbar_top">
<!--   -->
</a><a href="#skip-navbar_top" title="Skip navigation links"></a><a name="navbar_top_firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="../../../overview-summary.html">Overview</a></li>
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="class-use/Widget.html">Use</a></li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="../../../deprecated-list.html">Deprecated</a></li>
<li><a href="../../../index-files/index-1.html">Index</a></li>
<li><a href="../../../help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="../../../ks/common/view/StringView.html" title="class in ks.common.view"><span class="strong">Prev Class</span></a></li>
<li>Next Class</li>
</ul>
<ul class="navList">
<li><a href="../../../index.html?ks/common/view/Widget.html" target="_top">Frames</a></li>
<li><a href="Widget.html" target="_top">No Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_top">
<li><a href="../../../allclasses-noframe.html">All Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_top");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li>Nested&nbsp;|&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li><a href="#constructor_summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method_summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li><a href="#constructor_detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method_detail">Method</a></li>
</ul>
</div>
<a name="skip-navbar_top">
<!--   -->
</a></div>
<!-- ========= END OF TOP NAVBAR ========= -->
<!-- ======== START OF CLASS DATA ======== -->
<div class="header">
<div class="subTitle">ks.common.view</div>
<h2 title="Class Widget" class="title">Class Widget</h2>
</div>
<div class="contentContainer">
<ul class="inheritance">
<li>java.lang.Object</li>
<li>
<ul class="inheritance">
<li>ks.common.view.Widget</li>
</ul>
</li>
</ul>
<div class="description">
<ul class="blockList">
<li class="blockList">
<dl>
<dt>All Implemented Interfaces:</dt>
<dd><a href="../../../ks/common/model/ElementListener.html" title="interface in ks.common.model">ElementListener</a></dd>
</dl>
<dl>
<dt>Direct Known Subclasses:</dt>
<dd><a href="../../../ks/common/view/BuildablePileView.html" title="class in ks.common.view">BuildablePileView</a>, <a href="../../../ks/common/view/CardView.html" title="class in ks.common.view">CardView</a>, <a href="../../../ks/common/view/ColumnView.html" title="class in ks.common.view">ColumnView</a>, <a href="../../../ks/common/view/DeckView.html" title="class in ks.common.view">DeckView</a>, <a href="../../../ks/common/view/EmptyWidget.html" title="class in ks.common.view">EmptyWidget</a>, <a href="../../../ks/common/view/IntegerView.html" title="class in ks.common.view">IntegerView</a>, <a href="../../../ks/common/view/PileView.html" title="class in ks.common.view">PileView</a>, <a href="../../../dijordan/view/PyramidView.html" title="class in dijordan.view">PyramidView</a>, <a href="../../../ks/common/view/RowView.html" title="class in ks.common.view">RowView</a>, <a href="../../../ks/common/view/StringView.html" title="class in ks.common.view">StringView</a></dd>
</dl>
<hr>
<br>
<pre>public abstract class <span class="strong">Widget</span>
extends java.lang.Object
implements <a href="../../../ks/common/model/ElementListener.html" title="interface in ks.common.model">ElementListener</a></pre>
<div class="block">For all view.* entities, this is the superclass that defines important concepts.
 <p>
 The widget is drawn at location (x,y) extending width pixels to the right and 
 height pixels down.
 <p>
 Every widget has an associated CardImages object to retrieve cards and the card 
 reverse image. When a widget is initially constructed, it is marked as 'dirty'.
 <p>
 The widget class provides an offscreenImage to each subclass should it be desired.
 <a href="../../../ks/common/view/Widget.html#offscreenImage"><code>offscreenImage</code></a> is stored by this class to enable rapid cleanup of image
 resources once no longer necessary. Each subclass can allocate and release resources
 in its own <a href="../../../ks/common/view/Widget.html#dispose()"><code>dispose()</code></a> method, but be sure to invoke super.dispose() to properly
 clean up.
 <p>
 Because the card images for widgets can be disposed independently of the drawing 
 AWT thread, there may be times when a <code>NullPointerException</code> is thrown
 within the redraw methods. There is no easy way to eliminate this situation
 except for synchronizing on the cards within <a href="../../../ks/common/view/Widget.html#redraw()"><code>redraw()</code></a>, but this
 extra burden would only impair performance. As it stands, the only 
 time this should happen is during testing when numerous windows are
 created and disposed of during the JUnit testing.</div>
<dl><dt><span class="strong">Author:</span></dt>
  <dd>George T. Heineman (heineman@cs.wpi.edu)</dd></dl>
</li>
</ul>
</div>
<div class="summary">
<ul class="blockList">
<li class="blockList">
<!-- ======== CONSTRUCTOR SUMMARY ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor_summary">
<!--   -->
</a>
<h3>Constructor Summary</h3>
<table class="overviewSummary" border="0" cellpadding="3" cellspacing="0" summary="Constructor Summary table, listing constructors, and an explanation">
<caption><span>Constructors</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colOne" scope="col">Constructor and Description</th>
</tr>
<tr class="altColor">
<td class="colOne"><code><strong><a href="../../../ks/common/view/Widget.html#Widget(ks.common.model.Element)">Widget</a></strong>(<a href="../../../ks/common/model/Element.html" title="class in ks.common.model">Element</a>&nbsp;me)</code>
<div class="block">Default constructor for Widgets.</div>
</td>
</tr>
</table>
</li>
</ul>
<!-- ========== METHOD SUMMARY =========== -->
<ul class="blockList">
<li class="blockList"><a name="method_summary">
<!--   -->
</a>
<h3>Method Summary</h3>
<table class="overviewSummary" border="0" cellpadding="3" cellspacing="0" summary="Method Summary table, listing methods, and an explanation">
<caption><span>Methods</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colLast" scope="col">Method and Description</th>
</tr>
<tr class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/view/Widget.html#dispose()">dispose</a></strong>()</code>
<div class="block">Clear away offscreen images.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>java.awt.Rectangle</code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/view/Widget.html#getBounds()">getBounds</a></strong>()</code>
<div class="block">Return the bounds of the Widget as a newly instantiated rectangle.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code><a href="../../../ks/common/view/Container.html" title="class in ks.common.view">Container</a></code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/view/Widget.html#getContainer()">getContainer</a></strong>()</code>
<div class="block">Return the container for this Widget.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>int</code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/view/Widget.html#getHeight()">getHeight</a></strong>()</code>
<div class="block">Return the height of the widget.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>java.awt.Image</code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/view/Widget.html#getImage()">getImage</a></strong>()</code>
<div class="block">Return the image of this Widget (used for drawing the Widget on screen).</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code><a href="../../../ks/common/model/Element.html" title="class in ks.common.model">Element</a></code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/view/Widget.html#getModelElement()">getModelElement</a></strong>()</code>
<div class="block">Return the Model Element associated with this Widget.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code><a href="../../../ks/common/controller/MouseManager.html" title="class in ks.common.controller">MouseManager</a></code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/view/Widget.html#getMouseManager()">getMouseManager</a></strong>()</code>
<div class="block">Return the MouseManager associated with this Widget.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>java.lang.String</code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/view/Widget.html#getName()">getName</a></strong>()</code>
<div class="block">Return the name of this widget.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>int</code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/view/Widget.html#getWidth()">getWidth</a></strong>()</code>
<div class="block">Return the width of the widget.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>int</code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/view/Widget.html#getX()">getX</a></strong>()</code>
<div class="block">Return the x coordinate for the Widget's location.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>int</code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/view/Widget.html#getY()">getY</a></strong>()</code>
<div class="block">Return the y coordinate for the Widget's location.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>boolean</code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/view/Widget.html#inBounds(java.awt.Point)">inBounds</a></strong>(java.awt.Point&nbsp;p)</code>
<div class="block">If (x,y) point is within this widget, return true, else false.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>boolean</code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/view/Widget.html#isDirty()">isDirty</a></strong>()</code>
<div class="block">Determine whether this widget needs to be recalculated.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/view/Widget.html#modelChanged(ks.common.model.Element)">modelChanged</a></strong>(<a href="../../../ks/common/model/Element.html" title="class in ks.common.model">Element</a>&nbsp;e)</code>
<div class="block">Respond to underlying changes in this widget's model.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/view/Widget.html#paint(java.awt.Graphics)">paint</a></strong>(java.awt.Graphics&nbsp;g)</code>
<div class="block">Each widget must contain the logic to visually represent itself into the given 
 <code>Graphics</code> context.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>abstract void</code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/view/Widget.html#redraw()">redraw</a></strong>()</code>
<div class="block">Redraws the view from the model.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/view/Widget.html#refresh()">refresh</a></strong>()</code>
<div class="block">Refresh is an optimized command that only redraws the widget if it is dirty.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>boolean</code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/view/Widget.html#returnWidget(ks.common.view.Widget)">returnWidget</a></strong>(<a href="../../../ks/common/view/Widget.html" title="class in ks.common.view">Widget</a>&nbsp;w)</code>
<div class="block">Each Widget presents the graphical representation of an entity element.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/view/Widget.html#setBounds(int, int, int, int)">setBounds</a></strong>(int&nbsp;x,
         int&nbsp;y,
         int&nbsp;width,
         int&nbsp;height)</code>
<div class="block">Set the graphical bounds for this widget within the Container.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/view/Widget.html#setBounds(java.awt.Rectangle)">setBounds</a></strong>(java.awt.Rectangle&nbsp;r)</code>
<div class="block">Set the graphical bounds for this widget within the Container using a Rectangle.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/view/Widget.html#setContainer(ks.common.view.Container)">setContainer</a></strong>(<a href="../../../ks/common/view/Container.html" title="class in ks.common.view">Container</a>&nbsp;container)</code>
<div class="block">All Widget objects need to know the Container within which they will be made visible.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/view/Widget.html#setDirty(boolean)">setDirty</a></strong>(boolean&nbsp;newDirty)</code>
<div class="block">Determines whether this widget's screen representation needs to be recalculated.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/view/Widget.html#setHeight(int)">setHeight</a></strong>(int&nbsp;newHeight)</code>
<div class="block">Set the height of this widget.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/view/Widget.html#setImage(java.awt.Image)">setImage</a></strong>(java.awt.Image&nbsp;newImage)</code>
<div class="block">To update the image as shown by this widget, the subclass will create an off-screen
 image and call this method.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/view/Widget.html#setMouseAdapter(java.awt.event.MouseAdapter)">setMouseAdapter</a></strong>(java.awt.event.MouseAdapter&nbsp;ma)</code>
<div class="block">Alter the way in which this Widget reacts to MouseEvents.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/view/Widget.html#setMouseManager(ks.common.controller.MouseManager)">setMouseManager</a></strong>(<a href="../../../ks/common/controller/MouseManager.html" title="class in ks.common.controller">MouseManager</a>&nbsp;mm)</code>
<div class="block">Set the aggregate entity that consolidates MouseAdapter and MouseMotionAdapter.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/view/Widget.html#setMouseMotionAdapter(java.awt.event.MouseMotionAdapter)">setMouseMotionAdapter</a></strong>(java.awt.event.MouseMotionAdapter&nbsp;ma)</code>
<div class="block">Alter the way in which this Widget's MouseManager reacts to MouseMotion events.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/view/Widget.html#setName(java.lang.String)">setName</a></strong>(java.lang.String&nbsp;newName)</code>
<div class="block">Set the name for this Widget.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/view/Widget.html#setUndoAdapter(ks.common.controller.UndoAdapter)">setUndoAdapter</a></strong>(<a href="../../../ks/common/controller/UndoAdapter.html" title="class in ks.common.controller">UndoAdapter</a>&nbsp;ua)</code>
<div class="block">Alter the way in which this Widget reacts to UndoRequested events.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/view/Widget.html#setX(int)">setX</a></strong>(int&nbsp;newX)</code>
<div class="block">Set the X position of the widget.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/view/Widget.html#setXY(int, int)">setXY</a></strong>(int&nbsp;x,
     int&nbsp;y)</code>
<div class="block">Set the (x,y) position of the widget.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/view/Widget.html#setY(int)">setY</a></strong>(int&nbsp;newY)</code>
<div class="block">Set the Y position of the widget.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>java.lang.String</code></td>
<td class="colLast"><code><strong><a href="../../../ks/common/view/Widget.html#toString()">toString</a></strong>()</code>
<div class="block">Return String representation of the given View Widget.</div>
</td>
</tr>
</table>
<ul class="blockList">
<li class="blockList"><a name="methods_inherited_from_class_java.lang.Object">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;java.lang.Object</h3>
<code>equals, getClass, hashCode, notify, notifyAll, wait, wait, wait</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
<div class="details">
<ul class="blockList">
<li class="blockList">
<!-- ========= CONSTRUCTOR DETAIL ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor_detail">
<!--   -->
</a>
<h3>Constructor Detail</h3>
<a name="Widget(ks.common.model.Element)">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>Widget</h4>
<pre>public&nbsp;Widget(<a href="../../../ks/common/model/Element.html" title="class in ks.common.model">Element</a>&nbsp;me)</pre>
<div class="block">Default constructor for Widgets. Used as super() within subclasses' constructors.
 Since V1.6.8 check for null argument.
 <p></div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>me</code> - ks.common.model.Element</dd></dl>
</li>
</ul>
</li>
</ul>
<!-- ============ METHOD DETAIL ========== -->
<ul class="blockList">
<li class="blockList"><a name="method_detail">
<!--   -->
</a>
<h3>Method Detail</h3>
<a name="getBounds()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getBounds</h4>
<pre>public&nbsp;java.awt.Rectangle&nbsp;getBounds()</pre>
<div class="block">Return the bounds of the Widget as a newly instantiated rectangle.</div>
<dl><dt><span class="strong">Returns:</span></dt><dd>java.awt.Rectangle</dd></dl>
</li>
</ul>
<a name="getContainer()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getContainer</h4>
<pre>public&nbsp;<a href="../../../ks/common/view/Container.html" title="class in ks.common.view">Container</a>&nbsp;getContainer()</pre>
<div class="block">Return the container for this Widget.</div>
<dl><dt><span class="strong">Returns:</span></dt><dd>java.awt.Component</dd></dl>
</li>
</ul>
<a name="getHeight()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getHeight</h4>
<pre>public&nbsp;int&nbsp;getHeight()</pre>
<div class="block">Return the height of the widget.</div>
<dl><dt><span class="strong">Returns:</span></dt><dd>int</dd></dl>
</li>
</ul>
<a name="getImage()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getImage</h4>
<pre>public&nbsp;java.awt.Image&nbsp;getImage()</pre>
<div class="block">Return the image of this Widget (used for drawing the Widget on screen).</div>
<dl><dt><span class="strong">Returns:</span></dt><dd>java.awt.Image</dd></dl>
</li>
</ul>
<a name="getModelElement()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getModelElement</h4>
<pre>public&nbsp;<a href="../../../ks/common/model/Element.html" title="class in ks.common.model">Element</a>&nbsp;getModelElement()</pre>
<div class="block">Return the Model Element associated with this Widget.</div>
<dl><dt><span class="strong">Returns:</span></dt><dd>ks.common.model.Element</dd></dl>
</li>
</ul>
<a name="getMouseManager()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getMouseManager</h4>
<pre>public&nbsp;<a href="../../../ks/common/controller/MouseManager.html" title="class in ks.common.controller">MouseManager</a>&nbsp;getMouseManager()</pre>
<div class="block">Return the MouseManager associated with this Widget.
 <p>
 At some point in the future, this manager will return boolean to signal whether
 it processed the event or not. This will allow us to produce a layered approach
 to controllers. Develop MouseMotionController, MouseController in controller
 package just for this purpose.
 <p></div>
<dl><dt><span class="strong">Returns:</span></dt><dd>ks.common.view.MouseManager</dd></dl>
</li>
</ul>
<a name="getName()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getName</h4>
<pre>public&nbsp;java.lang.String&nbsp;getName()</pre>
<div class="block">Return the name of this widget.</div>
<dl><dt><span class="strong">Returns:</span></dt><dd>String</dd></dl>
</li>
</ul>
<a name="getWidth()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getWidth</h4>
<pre>public&nbsp;int&nbsp;getWidth()</pre>
<div class="block">Return the width of the widget.</div>
<dl><dt><span class="strong">Returns:</span></dt><dd>int</dd></dl>
</li>
</ul>
<a name="getX()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getX</h4>
<pre>public&nbsp;int&nbsp;getX()</pre>
<div class="block">Return the x coordinate for the Widget's location.</div>
<dl><dt><span class="strong">Returns:</span></dt><dd>int</dd></dl>
</li>
</ul>
<a name="getY()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getY</h4>
<pre>public&nbsp;int&nbsp;getY()</pre>
<div class="block">Return the y coordinate for the Widget's location.</div>
<dl><dt><span class="strong">Returns:</span></dt><dd>int</dd></dl>
</li>
</ul>
<a name="inBounds(java.awt.Point)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>inBounds</h4>
<pre>public&nbsp;boolean&nbsp;inBounds(java.awt.Point&nbsp;p)</pre>
<div class="block">If (x,y) point is within this widget, return true, else false.
 <p></div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>p</code> - java.awt.Point</dd>
<dt><span class="strong">Returns:</span></dt><dd>boolean</dd></dl>
</li>
</ul>
<a name="isDirty()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>isDirty</h4>
<pre>public&nbsp;boolean&nbsp;isDirty()</pre>
<div class="block">Determine whether this widget needs to be recalculated.</div>
<dl><dt><span class="strong">Returns:</span></dt><dd>boolean</dd></dl>
</li>
</ul>
<a name="modelChanged(ks.common.model.Element)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>modelChanged</h4>
<pre>public&nbsp;void&nbsp;modelChanged(<a href="../../../ks/common/model/Element.html" title="class in ks.common.model">Element</a>&nbsp;e)</pre>
<div class="block">Respond to underlying changes in this widget's model.
 <p>
 See ElementListener.
 <p></div>
<dl>
<dt><strong>Specified by:</strong></dt>
<dd><code><a href="../../../ks/common/model/ElementListener.html#modelChanged(ks.common.model.Element)">modelChanged</a></code>&nbsp;in interface&nbsp;<code><a href="../../../ks/common/model/ElementListener.html" title="interface in ks.common.model">ElementListener</a></code></dd>
<dt><span class="strong">Parameters:</span></dt><dd><code>e</code> - ks.common.model.Element</dd></dl>
</li>
</ul>
<a name="paint(java.awt.Graphics)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>paint</h4>
<pre>public&nbsp;void&nbsp;paint(java.awt.Graphics&nbsp;g)</pre>
<div class="block">Each widget must contain the logic to visually represent itself into the given 
 <code>Graphics</code> context. Paint is an imperative command that forces the 
 widget to draw itself.
 <p>
 If the widget is dirty, or if it has never been drawn before, then it is redrawn
 before being painted to the screen, and is marked as clean.
 <p></div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>g</code> - java.awt.Graphics</dd></dl>
</li>
</ul>
<a name="redraw()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>redraw</h4>
<pre>public abstract&nbsp;void&nbsp;redraw()</pre>
<div class="block">Redraws the view from the model. Each subclass must contain the specific logic.</div>
</li>
</ul>
<a name="refresh()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>refresh</h4>
<pre>public&nbsp;void&nbsp;refresh()</pre>
<div class="block">Refresh is an optimized command that only redraws the widget if it is dirty.</div>
</li>
</ul>
<a name="returnWidget(ks.common.view.Widget)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>returnWidget</h4>
<pre>public&nbsp;boolean&nbsp;returnWidget(<a href="../../../ks/common/view/Widget.html" title="class in ks.common.view">Widget</a>&nbsp;w)</pre>
<div class="block">Each Widget presents the graphical representation of an entity element. It also
 provides basic mechanisms for extracting Cards or other structures of Cards from
 this underlying element. There is no standard means for doing this extraction,
 but this method can be used to undo such an extraction. For example, if on
 mousePress, a widget were to extract the topmost card from its column and make it
 available for dragging as a <code>CardView</code>, then this
 <code>returnWidget()</code> method would return the card back onto the underlying
 Column.
 <p>
 This method as provided returns <code>true</code> in all cases; simply override it
 in your Widget subclass as you deem appropriate.
 <p>
 This method will only work if the extraction methods, shown above, actually call
 the setDragSource() on the container when the initial extraction takes place.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>w</code> - ks.common.view.Widget</dd>
<dt><span class="strong">Returns:</span></dt><dd>boolean</dd><dt><span class="strong">Since:</span></dt>
  <dd>V1.6</dd></dl>
</li>
</ul>
<a name="setBounds(int, int, int, int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>setBounds</h4>
<pre>public&nbsp;void&nbsp;setBounds(int&nbsp;x,
             int&nbsp;y,
             int&nbsp;width,
             int&nbsp;height)</pre>
<div class="block">Set the graphical bounds for this widget within the Container.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>x</code> - int</dd><dd><code>y</code> - int</dd><dd><code>width</code> - int</dd><dd><code>height</code> - int</dd></dl>
</li>
</ul>
<a name="setBounds(java.awt.Rectangle)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>setBounds</h4>
<pre>public&nbsp;void&nbsp;setBounds(java.awt.Rectangle&nbsp;r)</pre>
<div class="block">Set the graphical bounds for this widget within the Container using a Rectangle.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>r</code> - java.awt.Rectangle</dd></dl>
</li>
</ul>
<a name="setContainer(ks.common.view.Container)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>setContainer</h4>
<pre>public&nbsp;void&nbsp;setContainer(<a href="../../../ks/common/view/Container.html" title="class in ks.common.view">Container</a>&nbsp;container)</pre>
<div class="block">All Widget objects need to know the Container within which they will be made visible. 
 This enables the widget to create an offscreen image whenever it needs to, by
 asking the container to do it for itself!
 <p>
 This method sets the <code>cards</code> field so that the widget knows the cards
 to be used for drawing.
 <p></div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>container</code> - Container</dd><dt><span class="strong">Since:</span></dt>
  <dd>V2.1, the Container has determined its card images before widgets are added; here
    we just get the card images from the Container.
 <p></dd></dl>
</li>
</ul>
<a name="setDirty(boolean)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>setDirty</h4>
<pre>public&nbsp;void&nbsp;setDirty(boolean&nbsp;newDirty)</pre>
<div class="block">Determines whether this widget's screen representation needs to be recalculated.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>newDirty</code> - boolean</dd></dl>
</li>
</ul>
<a name="setHeight(int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>setHeight</h4>
<pre>public&nbsp;void&nbsp;setHeight(int&nbsp;newHeight)</pre>
<div class="block">Set the height of this widget.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>newHeight</code> - int</dd></dl>
</li>
</ul>
<a name="setImage(java.awt.Image)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>setImage</h4>
<pre>public&nbsp;void&nbsp;setImage(java.awt.Image&nbsp;newImage)</pre>
<div class="block">To update the image as shown by this widget, the subclass will create an off-screen
 image and call this method.  But, someone will ultimately have to call refresh once done.
 <p>
 This sets the dirty state of the Widget.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>newImage</code> - java.awt.Image</dd></dl>
</li>
</ul>
<a name="setMouseAdapter(java.awt.event.MouseAdapter)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>setMouseAdapter</h4>
<pre>public&nbsp;void&nbsp;setMouseAdapter(java.awt.event.MouseAdapter&nbsp;ma)</pre>
<div class="block">Alter the way in which this Widget reacts to MouseEvents.
 <p>
 Add our own MouseController so we can return boolean values.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>ma</code> - java.awt.event.MouseAdapter</dd></dl>
</li>
</ul>
<a name="setMouseManager(ks.common.controller.MouseManager)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>setMouseManager</h4>
<pre>public&nbsp;void&nbsp;setMouseManager(<a href="../../../ks/common/controller/MouseManager.html" title="class in ks.common.controller">MouseManager</a>&nbsp;mm)</pre>
<div class="block">Set the aggregate entity that consolidates MouseAdapter and MouseMotionAdapter. 
 <p>
 Add our own Controllers so we can return boolean values.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>mm</code> - MouseManager</dd></dl>
</li>
</ul>
<a name="setMouseMotionAdapter(java.awt.event.MouseMotionAdapter)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>setMouseMotionAdapter</h4>
<pre>public&nbsp;void&nbsp;setMouseMotionAdapter(java.awt.event.MouseMotionAdapter&nbsp;ma)</pre>
<div class="block">Alter the way in which this Widget's MouseManager reacts to MouseMotion events.
 <p>
 Add our own MouseMotionController</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>ma</code> - java.awt.event.MouseMotionAdapter</dd></dl>
</li>
</ul>
<a name="setName(java.lang.String)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>setName</h4>
<pre>public&nbsp;void&nbsp;setName(java.lang.String&nbsp;newName)</pre>
<div class="block">Set the name for this Widget.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>newName</code> - java.lang.String</dd></dl>
</li>
</ul>
<a name="setUndoAdapter(ks.common.controller.UndoAdapter)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>setUndoAdapter</h4>
<pre>public&nbsp;void&nbsp;setUndoAdapter(<a href="../../../ks/common/controller/UndoAdapter.html" title="class in ks.common.controller">UndoAdapter</a>&nbsp;ua)</pre>
<div class="block">Alter the way in which this Widget reacts to UndoRequested events.
 <p>
 Change this to be UndoController to be consistent with everything else in the universe!</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>ua</code> - java.awt.event.UndoAdapter</dd></dl>
</li>
</ul>
<a name="setX(int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>setX</h4>
<pre>public&nbsp;void&nbsp;setX(int&nbsp;newX)</pre>
<div class="block">Set the X position of the widget.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>newX</code> - int</dd></dl>
</li>
</ul>
<a name="setXY(int, int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>setXY</h4>
<pre>public&nbsp;void&nbsp;setXY(int&nbsp;x,
         int&nbsp;y)</pre>
<div class="block">Set the (x,y) position of the widget.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>x</code> - int</dd><dd><code>y</code> - int</dd></dl>
</li>
</ul>
<a name="setY(int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>setY</h4>
<pre>public&nbsp;void&nbsp;setY(int&nbsp;newY)</pre>
<div class="block">Set the Y position of the widget.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>newY</code> - int</dd></dl>
</li>
</ul>
<a name="toString()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>toString</h4>
<pre>public&nbsp;java.lang.String&nbsp;toString()</pre>
<div class="block">Return String representation of the given View Widget.
 <p>
 If this method is called on the EmptyWidget, then "[EMPTYWIDGET]" is returned.</div>
<dl>
<dt><strong>Overrides:</strong></dt>
<dd><code>toString</code>&nbsp;in class&nbsp;<code>java.lang.Object</code></dd>
<dt><span class="strong">Returns:</span></dt><dd>String</dd></dl>
</li>
</ul>
<a name="dispose()">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>dispose</h4>
<pre>public&nbsp;void&nbsp;dispose()</pre>
<div class="block">Clear away offscreen images.
 <p>
 Note that CardImages is referenced but we do not take responsibility for clearing it.</div>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</div>
<!-- ========= END OF CLASS DATA ========= -->
<!-- ======= START OF BOTTOM NAVBAR ====== -->
<div class="bottomNav"><a name="navbar_bottom">
<!--   -->
</a><a href="#skip-navbar_bottom" title="Skip navigation links"></a><a name="navbar_bottom_firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="../../../overview-summary.html">Overview</a></li>
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="class-use/Widget.html">Use</a></li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="../../../deprecated-list.html">Deprecated</a></li>
<li><a href="../../../index-files/index-1.html">Index</a></li>
<li><a href="../../../help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="../../../ks/common/view/StringView.html" title="class in ks.common.view"><span class="strong">Prev Class</span></a></li>
<li>Next Class</li>
</ul>
<ul class="navList">
<li><a href="../../../index.html?ks/common/view/Widget.html" target="_top">Frames</a></li>
<li><a href="Widget.html" target="_top">No Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_bottom">
<li><a href="../../../allclasses-noframe.html">All Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_bottom");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li>Nested&nbsp;|&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li><a href="#constructor_summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method_summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li><a href="#constructor_detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method_detail">Method</a></li>
</ul>
</div>
<a name="skip-navbar_bottom">
<!--   -->
</a></div>
<!-- ======== END OF BOTTOM NAVBAR ======= -->
</body>
</html>
